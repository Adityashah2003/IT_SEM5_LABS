-- Create tables with primary and foreign keys
CREATE TABLE STUDENT (
    regno VARCHAR(20) PRIMARY KEY,
    name VARCHAR(50),
    major VARCHAR(20),
    bdate DATE
);

CREATE TABLE COURSE (
    course# INT PRIMARY KEY,
    cname VARCHAR(30),
    dept VARCHAR(30)
);

CREATE TABLE ENROLL (
    regno VARCHAR(20),
    course# INT,
    PRIMARY KEY (regno, course#),
    FOREIGN KEY (regno) REFERENCES STUDENT(regno),
    FOREIGN KEY (course#) REFERENCES COURSE(course#)
);

CREATE TABLE BOOK_ADOPTION (
    course# INT,
    sem INT,
    book_isbn INT,
    PRIMARY KEY (course#, sem, book_isbn),
    FOREIGN KEY (course#) REFERENCES COURSE(course#),
    FOREIGN KEY (book_isbn) REFERENCES TEXT(book_isbn)
);

CREATE TABLE TEXT (
    book_isbn INT PRIMARY KEY,
    booktitle VARCHAR(50),
    publisher VARCHAR(50),
    author VARCHAR(50)
);

-- Insert tuples into tables
-- You can add more tuples as needed
INSERT INTO STUDENT VALUES ('ABC-001', 'John Doe', 'Computer Science', '2000-01-15');
INSERT INTO STUDENT VALUES ('ABC-002', 'Jane Smith', 'Mathematics', '1999-03-20');
INSERT INTO STUDENT VALUES ('ABC-003', 'Bob Johnson', 'Physics', '2001-07-10');
INSERT INTO STUDENT VALUES ('ABC-004', 'Alice Brown', 'Chemistry', '1998-05-05');
INSERT INTO STUDENT VALUES ('ABC-005', 'Eva Wilson', 'Biology', '2002-11-30');

INSERT INTO COURSE VALUES (101, 'Database Systems', 'Computer Science');
INSERT INTO COURSE VALUES (102, 'Linear Algebra', 'Mathematics');
INSERT INTO COURSE VALUES (103, 'Quantum Mechanics', 'Physics');
INSERT INTO COURSE VALUES (104, 'Organic Chemistry', 'Chemistry');
INSERT INTO COURSE VALUES (105, 'Genetics', 'Biology');

INSERT INTO ENROLL VALUES ('ABC-001', 101);
INSERT INTO ENROLL VALUES ('ABC-001', 102);
INSERT INTO ENROLL VALUES ('ABC-002', 102);
INSERT INTO ENROLL VALUES ('ABC-003', 103);
INSERT INTO ENROLL VALUES ('ABC-004', 104);

INSERT INTO TEXT VALUES (1, 'Database Management', 'Pearson', 'David Kroenke');
INSERT INTO TEXT VALUES (2, 'Linear Algebra and Its Applications', 'Wiley', 'David C. Lay');
INSERT INTO TEXT VALUES (3, 'Principles of Quantum Mechanics', 'Springer', 'R. Shankar');
INSERT INTO TEXT VALUES (4, 'Organic Chemistry', 'Pearson', 'Paula Y. Bruice');
INSERT INTO TEXT VALUES (5, 'Genetics: From Genes to Genomes', 'McGraw-Hill', 'Leland Hartwell');

INSERT INTO BOOK_ADOPTION VALUES (101, 1, 1);
INSERT INTO BOOK_ADOPTION VALUES (102, 1, 2);
INSERT INTO BOOK_ADOPTION VALUES (103, 1, 3);
INSERT INTO BOOK_ADOPTION VALUES (104, 1, 4);
INSERT INTO BOOK_ADOPTION VALUES (105, 1, 5);


````````````````````````L4 Q3 a `````````````````````````````
select cname from course
where course# in ( select course# from book_adoption
group by course#
having count(course#) > 1);

````````````````````````L4 Q3 b ``````````````````````````````
SELECT DISTINCT C.DEPT
FROM COURSE C
WHERE NOT EXISTS (
	SELECT *
	FROM BOOK_ADOPTION BA
	WHERE BA.COURSE# = C.COURSE#
	AND BA.BOOK_ISBN NOT IN (
		SELECT T.BOOK_ISBN
		FROM TEXT T
		WHERE T.PUBLISHER = 'Amazon'
	)
);

````````````````````````L4 Q3 c ``````````````````````````````
select name, count(distinct dept) as number_of_departments
from student natural join course natural join enroll
where regno in (
select regno from enroll
group by regno having count (dept) >= 2)
group by name;

````````````````````````L4 Q3 d ``````````````````````````````
select regno,name
from student
where regno not in ( select regno 
		from enroll);

````````````````````````L4 Q3 e```````````````````````````````
select distinct booktitle
from text natural join book_adoption natural join course
where course# in (
select course# from
enroll);

````````````````````````L4 Q3 f```````````````````````````````
insert into text values (6,'English2','Amazon','S.C.Gupta');
insert into book_adoption values (1088,2,6);

SELECT BA.COURSE#
FROM BOOK_ADOPTION BA
WHERE BA.BOOK_ISBN IN (
SELECT T.BOOK_ISBN
FROM TEXT T
WHERE T.PUBLISHER = 'Amazon'
)
GROUP BY BA.COURSE#
HAVING COUNT(DISTINCT BA.BOOK_ISBN) >= 2;

````````````````````````L4 Q3 g```````````````````````````````

select name, regno, count(regno) as num_of_books
from student natural join enroll natural join book_adoption
group by name, regno
having count(regno)> all (
select count(book_isbn)
from book_adoption
group by course#);

````````````````````````L4 Q3 h```````````````````````````````

select publisher, count(distinct book_isbn) as number_of_books_published
from text
group by publisher;


````````````````````````L4 Q3 i```````````````````````````````

insert into course values ('1011','CPI','Humanities');
insert into enroll values('ABC-005','1011');


SELECT regno,name
FROM enroll natural join student
minus
( SELECT regno,name
FROM enroll natural join student
where course# not in (
SELECT course#
FROM book_adoption)
);