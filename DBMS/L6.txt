2) 
create trigger driver_info
after insert on participated 
for each row
declare 
	did person.driver_id%type;
	n person.name%type;
	adr person.address%type;
begin
	did := :new.driver_id;
	select name into n, address into adr from person where driver_id = did;
	DBMS_OUTPUT.PUT_LINE('Name:' || n ||'Driver ID:' || did || 'Address' || adr);
end;
/

3)
create or replace function accd_fn(yr in varchar2)
return number
is
	no_of_accd number;
begin
   
	select count(reportno) into no_of_accd
	from accident
	where extract(year from accd_date)=yr;
	return no_of_accd;
end;
select accd_fn('2023') from Accident;
ACCD_FN('2023')
---------------
              4
              4
              4
              4
              4
              4
              4

7 rows selected.

4)
CREATE OR REPLACE PROCEDURE damage(
    did_in IN NUMBER,
    year_in IN NUMBER,
    cout OUT NUMBER
) AS
BEGIN
    SELECT SUM(damage_amount)
    INTO cout
    FROM participated
    WHERE reportno IN (
        SELECT reportno
        FROM accident
        WHERE EXTRACT(YEAR FROM accd_date) = year_in
    )
    AND driver_id = did_in;
END;


SQL> execute damage('12345','2003');
25000

PL/SQL procedure successfully completed.

5)
set serveroutput on
create or replace procedure location_info(location_in in varchar2)
is
begin    
    for i in (
        select name,participated.driver_id as D,reportno,accd_date
        from accident natural join participated,person
        where person.driver_id=participated.driver_id and location = location_in
    )
    loop
        dbms_output.put_line(i.name || ' ' || i.D || ' ' || i.reportno || ' ' || i.accd_date);
    end loop;
end;

SQL> execute location_info('Manipal');
abcde 12345 1 12-MAY-03

PL/SQL procedure successfully completed.


6)
create or replace procedure ins is
cursor c is 
select * from customer where cust_id in (select cust_id from orders group by cust_id having sum(order_amt) > 10000);
temp c%rowtype;
begin
open c;
loop
fetch c into temp;
exit when c%notfound;
insert into T1 values(temp.cust_id, temp.name, temp.city);
end loop;
close c;
end;

7)
create or replace procedure acc_info is
cursor c1 is
select * from accident;
temp c1%rowtype;
begin
open c1;
loop
fetch c1 into temp;
exit when c1%notfound;
if temp.location = 'Manipal' then
	insert into loc_manipal values(temp.reportno, temp.accd_date);
elsif temp.location = 'Uduipi' then
	insert into loc_uduipi values(temp.reportno, temp.accd_date);
end if;
end loop;
close c1;
end;


-------------- Additional -----------------------

CREATE OR REPLACE TRIGGER accident_count_trigger
AFTER INSERT ON PARTICIPATED
FOR EACH ROW
DECLARE 
    accident_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO accident_count
    FROM PARTICIPATED
    WHERE driver_id = :NEW.driver_id;

    IF accident_count >= 2 THEN
        DBMS_OUTPUT.PUT_LINE('Driver with ID ' || :NEW.driver_id || ' has been in ' || accident_count || ' accidents.');
    END IF;
END;
/

-------------- Additional -----------------------

CREATE OR REPLACE PROCEDURE display_discount AS 
    CURSOR order_cursor IS 
        SELECT order#, SUM(qty) as total_items, ordamt
        FROM ORDERS JOIN ORDER_ITEMS ON ORDERS.order# = ORDER_ITEMS.order#
        GROUP BY order#, ordamt;
    order_record order_cursor%ROWTYPE;
BEGIN
    OPEN order_cursor;
    FETCH order_cursor INTO order_record;
    WHILE order_cursor%FOUND LOOP
        IF order_record.total_items >= 5 THEN
            DBMS_OUTPUT.PUT_LINE('Order#: ' || order_record.order# || ', Original Amount: ' || order_record.ordamt || ', Discount Amount: ' || order_record.ordamt * 0.2);
        END IF;
    END LOOP;
    CLOSE order_cursor;
END;
/
